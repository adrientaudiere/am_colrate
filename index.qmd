---
title: "Arbuscular Mycorrhizal Colonization Rate Calculator"
format:
  html:
    page-layout: full
    theme: cosmo
    toc: false
    css: styles.css
filters:
  - webr
webr:
  packages: []
---

```{webr-r}
#| context: setup
# Load the functions from R/functions.R
source("R/functions.R")
```

## Introduction

This web application provides a robust and reproducible way to compute colonization rates of endomycorrhizal interactions. You can input data either manually or by uploading a CSV file.

## Data Input

::: {.panel-tabset}

### Manual Input

Enter your data values manually:

```{=html}
<div class="input-section">
  <div class="form-group">
    <label for="sample_id">Sample ID:</label>
    <input type="text" id="sample_id" class="form-control" placeholder="Enter sample ID">
  </div>

  <div class="form-group">
    <label for="total_intersections">Total Intersections:</label>
    <input type="number" id="total_intersections" class="form-control" placeholder="Enter total intersections" min="0">
  </div>

  <div class="form-group">
    <label for="colonized_intersections">Colonized Intersections:</label>
    <input type="number" id="colonized_intersections" class="form-control" placeholder="Enter colonized intersections" min="0">
  </div>

  <div class="form-group">
    <label for="arbuscules">Arbuscules Count:</label>
    <input type="number" id="arbuscules" class="form-control" placeholder="Enter arbuscules count" min="0">
  </div>

  <div class="form-group">
    <label for="vesicles">Vesicles Count:</label>
    <input type="number" id="vesicles" class="form-control" placeholder="Enter vesicles count" min="0">
  </div>

  <button id="add_manual" class="btn btn-primary" onclick="addManualData()">Add Sample</button>
  <button id="clear_manual" class="btn btn-secondary" onclick="clearManualForm()">Clear Form</button>
</div>
```

### CSV Upload

Upload a CSV file with your data:

```{=html}
<div class="input-section">
  <div class="form-group">
    <label for="csv_file">Select CSV File:</label>
    <input type="file" id="csv_file" class="form-control" accept=".csv" onchange="handleFileSelect(event)">
  </div>

  <div class="file-info">
    <p><strong>Expected CSV format:</strong></p>
    <ul>
      <li><code>sample_id</code>: Sample identifier</li>
      <li><code>total_intersections</code>: Total number of intersections observed</li>
      <li><code>colonized_intersections</code>: Number of colonized intersections</li>
      <li><code>arbuscules</code>: Number of arbuscules observed</li>
      <li><code>vesicles</code>: Number of vesicles observed</li>
    </ul>
    <p><a href="example_data.csv" download>Download example CSV file</a></p>
  </div>

  <button id="process_csv" class="btn btn-primary" onclick="processCSV()">Process CSV</button>
</div>
```

:::

## Results

::: {.results-section}
```{=html}
<div id="results_container">
  <div id="no_data_message" class="alert alert-info">
    No data available. Please enter data manually or upload a CSV file.
  </div>
  
  <div id="results_table" style="display: none;">
    <h3>Computed Metrics</h3>
    <div id="table_output"></div>
    
    <div class="download-section">
      <button id="download_csv" class="btn btn-success" onclick="downloadResults()">Download Results as CSV</button>
    </div>
  </div>
</div>
```
:::

<script>
// Global data storage
let appData = [];
let uploadedCSVData = null;

// Function to add manual data
function addManualData() {
  const sample_id = document.getElementById('sample_id').value;
  const total_intersections = parseInt(document.getElementById('total_intersections').value);
  const colonized_intersections = parseInt(document.getElementById('colonized_intersections').value);
  const arbuscules = parseInt(document.getElementById('arbuscules').value);
  const vesicles = parseInt(document.getElementById('vesicles').value);
  
  if (!sample_id || isNaN(total_intersections) || isNaN(colonized_intersections) || 
      isNaN(arbuscules) || isNaN(vesicles)) {
    alert('Please fill in all fields with valid values');
    return;
  }
  
  // Add to data array
  appData.push({
    sample_id: sample_id,
    total_intersections: total_intersections,
    colonized_intersections: colonized_intersections,
    arbuscules: arbuscules,
    vesicles: vesicles
  });
  
  // Clear form
  clearManualForm();
  
  // Update display
  updateDisplay();
}

// Function to clear manual form
function clearManualForm() {
  document.getElementById('sample_id').value = '';
  document.getElementById('total_intersections').value = '';
  document.getElementById('colonized_intersections').value = '';
  document.getElementById('arbuscules').value = '';
  document.getElementById('vesicles').value = '';
}

// Function to handle file selection
function handleFileSelect(event) {
  const file = event.target.files[0];
  if (!file) return;
  
  const reader = new FileReader();
  reader.onload = function(e) {
    const text = e.target.result;
    uploadedCSVData = parseCSV(text);
    console.log('CSV parsed successfully:', uploadedCSVData);
  };
  reader.readAsText(file);
}

// Simple CSV parser function
function parseCSV(text) {
  const lines = text.split('\n').filter(line => line.trim() !== '');
  if (lines.length < 2) return [];
  
  const headers = lines[0].split(',').map(h => h.trim());
  const data = [];
  
  for (let i = 1; i < lines.length; i++) {
    const values = lines[i].split(',').map(v => v.trim());
    if (values.length === headers.length) {
      const row = {};
      headers.forEach((header, index) => {
        const value = values[index];
        if (header === 'sample_id') {
          row[header] = value;
        } else {
          row[header] = parseFloat(value);
        }
      });
      
      // Filter out empty rows
      if (row.sample_id && 
          typeof row.total_intersections === 'number' &&
          typeof row.colonized_intersections === 'number' &&
          !isNaN(row.total_intersections) &&
          !isNaN(row.colonized_intersections)) {
        data.push(row);
      }
    }
  }
  
  return data;
}

// Function to process CSV data
function processCSV() {
  if (!uploadedCSVData || uploadedCSVData.length === 0) {
    alert('Please select a valid CSV file first');
    return;
  }
  
  appData = [...uploadedCSVData];
  updateDisplay();
}

// Function to compute metrics using R
async function computeMetrics(data) {
  // Convert JavaScript data to R data frame format
  const sample_ids = data.map(row => row.sample_id);
  const total_intersections = data.map(row => row.total_intersections);
  const colonized_intersections = data.map(row => row.colonized_intersections);
  const arbuscules = data.map(row => row.arbuscules);
  const vesicles = data.map(row => row.vesicles);
  
  // Create R data frame and compute metrics
  await globalThis.webR.evalRVoid(`
    temp_data <- data.frame(
      sample_id = c(${sample_ids.map(s => `"${s}"`).join(', ')}),
      total_intersections = c(${total_intersections.join(', ')}),
      colonized_intersections = c(${colonized_intersections.join(', ')}),
      arbuscules = c(${arbuscules.join(', ')}),
      vesicles = c(${vesicles.join(', ')})
    )
    result_data <- compute_metrics(temp_data)
  `);
  
  // Get results back from R
  const results = [];
  for (let i = 0; i < data.length; i++) {
    const colonization_rate = await globalThis.webR.evalRNumber(`result_data$colonization_rate[${i + 1}]`);
    const arbuscule_frequency = await globalThis.webR.evalRNumber(`result_data$arbuscule_frequency[${i + 1}]`);
    const vesicle_frequency = await globalThis.webR.evalRNumber(`result_data$vesicle_frequency[${i + 1}]`);
    
    results.push({
      ...data[i],
      colonization_rate: colonization_rate.toFixed(2),
      arbuscule_frequency: arbuscule_frequency.toFixed(2),
      vesicle_frequency: vesicle_frequency.toFixed(2)
    });
  }
  
  return results;
}

// Function to update display
async function updateDisplay() {
  const no_data_msg = document.getElementById('no_data_message');
  const results_table = document.getElementById('results_table');
  const table_output = document.getElementById('table_output');
  
  if (appData.length === 0) {
    no_data_msg.style.display = 'block';
    results_table.style.display = 'none';
  } else {
    no_data_msg.style.display = 'none';
    results_table.style.display = 'block';
    
    // Compute metrics
    const results = await computeMetrics(appData);
    
    // Create HTML table
    let html = '<table class="results-table"><thead><tr>';
    const headers = Object.keys(results[0]);
    headers.forEach(h => {
      html += `<th>${h.replace(/_/g, ' ').toUpperCase()}</th>`;
    });
    html += '</tr></thead><tbody>';
    
    results.forEach(row => {
      html += '<tr>';
      headers.forEach(h => {
        html += `<td>${row[h]}</td>`;
      });
      html += '</tr>';
    });
    html += '</tbody></table>';
    
    table_output.innerHTML = html;
  }
}

// Function to download results
async function downloadResults() {
  if (appData.length === 0) {
    alert('No data to download');
    return;
  }
  
  // Compute metrics for download
  const results = await computeMetrics(appData);
  
  // Convert to CSV
  const headers = Object.keys(results[0]);
  let csv = headers.join(',') + '\n';
  results.forEach(row => {
    csv += headers.map(h => row[h]).join(',') + '\n';
  });
  
  // Trigger download
  const blob = new Blob([csv], { type: 'text/csv' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = 'colonization_rates_results.csv';
  a.click();
  URL.revokeObjectURL(url);
}
</script>

## About

This application calculates various colonization metrics for arbuscular mycorrhizal fungi based on microscopic observations. The computed metrics include:

- **Colonization Rate**: Percentage of colonized intersections
- **Arbuscule Frequency**: Frequency of arbuscules per total intersections
- **Vesicle Frequency**: Frequency of vesicles per total intersections

The computations are performed using R functions defined in `R/functions.R` and executed in the browser using WebR.

